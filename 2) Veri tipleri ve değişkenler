let a:u8 = 196; // u : unsigned 8 bit (2^N=256) -N=8 için- 0,255 arası değer alır
println!("a = {}",a);
// Output : a = 196
// Ancak sonrasında a yı değiştirmek istersek,
a = 100;
// bu hata verecektir. Çünkü a immutable (değiştirilemez) olarak tanımlandı. mutable tanımlamak için:
let mut a:i8 = 100; // i : signed 8 bit (-2^(N-1) ile 2^(N-1)-1) yani -128,+127 arası değer alır
// mut sayesinde artık a'yı değiştirilebilir olarak tanımladık.


let c = 12345;  // dikkat edilirse burda i8 u8 gibi tanımlamalar yapmadık. Böyle durumda otomatik olarak i32 olarak tanımlıyor.
println!("c nin değeri: {} ve kapladığı alan {} bytedır.", c, mem::align_of_val(&c));
// mem::align_of_val kullanmak için önce std kütüphanesinden mem modülünü çağırdık. (pythondaki define olayı) bunu yapmak için kodun başına
use std::mem;
// yazdık. burda output: "c nin değeri: 12345 ve kapladığı alan 4 bytedır." 8 bit = 1 byte

// şimdi isize, usize nedir ona bakalım. Bilgisayarlarımız 32bit veya 64 bit mimariye sahip olabiliyor. Biz bir değişken tanımlarken 
// bilgisayarın mimarisi neyse onu tanımlamak için isize usize kullanıyoruz. Örn:
let d:isize = -550;
let d_boyut = mem::align_of_val(&d);
println!("d'nin değeri: {} ve boyutu {} byte. Bilgisayarınız {} bit işlemciye sahip.",d, d_boyut, d_boyut*8);
// output: d'nin değeri: -550 ve boyutu 8 byte. Bilgisayarınız 64 bit mimariye sahip.

// karakter tanımlama
let e:char = 'e';
println!("e nin değeri: {} ve kapladığı alan {} bytedır.", e, mem::align_of_val(&e));
// output: e nin değeri: e ve kapladığı alan 4 bytedır.

// virgüllü sayı (float) tanımlama
let f:f32 = 27.5;
println!("f nin değeri: {} ve kapladığı alan {} bytedır.", f, mem::align_of_val(&f));
// output: f nin değeri: 27.5 ve kapladığı alan 4 bytedır.

// boolen tanımlama
let g:bool = false;
println!("g nin değeri: {} ve kapladığı alan {} bytedır.", g, mem::align_of_val(&g));
// output: g nin değeri: false ve kapladığı alan 1 bytedır.


// Fonksiyon tanımlama
fn ornek_fonksiyon {
//işlemler burada yapılır
}


// Aritmetik işlemler
let mut a = 2*11-2;
// println!("{}", a)
let a_kup = i32::pow(a, 3);
println!("{}'nın 3. kuvveti = {}", a, a_kup);
// output: 20'nın 3. kuvveti = 8000


let b = 2.7;
let b_kup = f64::powi(b,3); // integer cinsinden üssünü almak için
let b_pi = f64::powf(b,std::f64::consts::PI); // float cinsinden üssünü almak için
println!("{0}'nin 3. kuvveti = {1} ve {0}'nin Pi. kuvveti = {2}", b, b_kup, b_pi) // indis numarası girerek b yi 2 kere girmek zorunda kalmadık
// output : 2.7'nin 3. kuvveti = 19.683000000000003 ve 2.7'nin Pi. kuvveti = 22.655269485887153



